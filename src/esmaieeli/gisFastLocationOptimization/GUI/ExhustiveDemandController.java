/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package esmaieeli.gisFastLocationOptimization.GUI;

import esmaieeli.gisFastLocationOptimization.Clustering.Zones;
import esmaieeli.gisFastLocationOptimization.GIS3D.LayerDefinition;
import esmaieeli.gisFastLocationOptimization.GIS3D.NumericLayer;
import esmaieeli.gisFastLocationOptimization.GIS3D.ReportResults;
import esmaieeli.gisFastLocationOptimization.Simulation.FacilityLocation;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Amir72c
 */
public class ExhustiveDemandController extends javax.swing.JDialog {

    MainFramePanel myParent;
    String layers[];
    ReportResults localReport;
    int progress = 0;

    /**
     * Creates new form ExhustiveDemandController
     */
    public ExhustiveDemandController(java.awt.Window window, MainFramePanel parent, ModalityType modal) {
        super(window, modal);
        initComponents();
        myParent = parent;
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        if (myParent.allData != null) {
            layers = new String[myParent.allData.all_Layers.size() + 1];

            layers[0] = "--";

            for (int i = 0; i < myParent.allData.all_Layers.size(); i++) {
                layers[i + 1] = ((LayerDefinition) myParent.allData.all_Layers.get(i)).layerName;
            }

            for (int i = 0; i < layers.length; i++) {
                model.addElement(layers[i]);
            }
        } else {
            layers = new String[1];

            layers[0] = "NO DATA!";

            model.addElement(layers[0]);

            jButton1.setEnabled(false);
        }
        layerNameCombobox.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lavaValueText = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        nodeBatchText = new javax.swing.JFormattedTextField();
        layerNameCombobox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        numCPUSpinner = new javax.swing.JSpinner();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Generate full demand");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Lava value:");

        lavaValueText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###"))));
        lavaValueText.setText("3");

        jLabel2.setText("Layer indicating reachable nodes:");

        jLabel3.setText("Nodes batch size:");

        nodeBatchText.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        nodeBatchText.setText("100");

        layerNameCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Number of CPUs:");

        numCPUSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jCheckBox1.setText("Sample?");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(100, 1, null, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(layerNameCombobox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lavaValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(numCPUSpinner))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nodeBatchText, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layerNameCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(lavaValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nodeBatchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(numCPUSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
//                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                //REPORTING
                String detailedResults = "Full demand simulation." + System.lineSeparator();
                Calendar currentDate = Calendar.getInstance();
                Date date = currentDate.getTime();
                double startRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
                long startTime = System.nanoTime();
                detailedResults = detailedResults + "Is sampled demand?: " + jCheckBox1.isSelected() + System.lineSeparator();
                //REPORTING
                String layerName = (String) layerNameCombobox.getSelectedItem();
                int targetLayer = myParent.findLayer(layerName);
                int batchSize = Integer.parseInt(nodeBatchText.getText());
                ArrayList<Zones> nodeBatch = new ArrayList();
                int landPriceLayerIndex = myParent.findLayer("landprice");
                int landExistanceLayerIndex = myParent.findLayer("freespace");
                int baseDemandLayerIndex = myParent.findLayer("base");
                int tourismGainLayerIndex = myParent.findLayer("tourismlayer");
                int populationDensityLayerIndex = myParent.findLayer("population_density");
                int studentLayerIndex = myParent.findLayer("studentLayer");
                int luxuryLayerIndex = myParent.findLayer("luxuryLayer");
                int trafficLayerIndex = myParent.findLayer("traffic");
                if (jCheckBox1.isSelected() == false) {
                    if (myParent.allData.all_Layers.get(targetLayer) instanceof NumericLayer) {
                        for (int i = 0; i < myParent.allData.all_Nodes.length; i++) {
                            if ((double) myParent.allData.all_Nodes[i].layers.get(targetLayer) > 0) {
                                Zones tempZone = new Zones(landPriceLayerIndex, landExistanceLayerIndex, baseDemandLayerIndex, tourismGainLayerIndex, populationDensityLayerIndex, studentLayerIndex, luxuryLayerIndex);
                                tempZone.locations = new FacilityLocation[1];
                                tempZone.locations[0] = new FacilityLocation(myParent, myParent.allData.all_Nodes[i], myParent.allData.all_Nodes[i].myWays[0], Double.parseDouble(lavaValueText.getText()));
                                tempZone.locations[0].zoneParent = tempZone;
                                nodeBatch.add(tempZone);
                            }
                            if (nodeBatch.size() >= batchSize) {
                                myParent.flowControl.simulateMultiLayerNonCompetingFacilityBased(nodeBatch.toArray(new Zones[nodeBatch.size()]), trafficLayerIndex, (int) numCPUSpinner.getValue(), false);
                                for (int j = 0; j < nodeBatch.size(); j++) {
                                    nodeBatch.get(j).locations[0].nodeLocation.layers.add(nodeBatch.get(j).locations[0].baseDemand[0]);
                                }
                                nodeBatch = new ArrayList();
                            }
                            System.out.println(((float) i / (float) myParent.allData.all_Nodes.length));
                            jProgressBar1.setValue((int) (((float) i / (float) myParent.allData.all_Nodes.length)*100));
                        }
                    } else {
                        System.out.println("Can not evaluate valid nodes by categorial layer, numeric layer is required. Valid nodes are defined as non-negative nodes.");
                        System.out.println("Considering all nodes.");
                        for (int i = 0; i < myParent.allData.all_Nodes.length; i++) {
                            Zones tempZone = new Zones(landPriceLayerIndex, landExistanceLayerIndex, baseDemandLayerIndex, tourismGainLayerIndex, populationDensityLayerIndex, studentLayerIndex, luxuryLayerIndex);
                            tempZone.locations = new FacilityLocation[1];
                            tempZone.locations[0] = new FacilityLocation(myParent, myParent.allData.all_Nodes[i], myParent.allData.all_Nodes[i].myWays[0], Double.parseDouble(lavaValueText.getText()));
                            tempZone.locations[0].zoneParent = tempZone;
                            nodeBatch.add(tempZone);
                            if (nodeBatch.size() >= batchSize) {
                                myParent.flowControl.simulateMultiLayerNonCompetingFacilityBased(nodeBatch.toArray(new Zones[nodeBatch.size()]), trafficLayerIndex, (int) numCPUSpinner.getValue(), false);
                                for (int j = 0; j < nodeBatch.size(); j++) {
                                    nodeBatch.get(j).locations[0].nodeLocation.layers.add(nodeBatch.get(j).locations[0].baseDemand[0]);
                                }
                                nodeBatch = new ArrayList();
                            }
                            System.out.println(((float) i / (float) myParent.allData.all_Nodes.length));
                            jProgressBar1.setValue((int) (((float) i / (float) myParent.allData.all_Nodes.length)*100));
                        }
                    }
                    myParent.allData.all_Layers.add(new NumericLayer("Full demand"));
                    myParent.refreshLayersList();
                } else {
                    int numSamples = Integer.parseInt(String.valueOf(jSpinner1.getValue()));
                    detailedResults = detailedResults + "Number of samples: " + numSamples + System.lineSeparator();
                    if (myParent.allData.all_Layers.get(targetLayer) instanceof NumericLayer) {
                        for (int i = 0; i < numSamples; i++) {
                            if ((double) myParent.allData.all_Nodes[i].layers.get(targetLayer) > 0) {
                                Zones tempZone = new Zones(landPriceLayerIndex, landExistanceLayerIndex, baseDemandLayerIndex, tourismGainLayerIndex, populationDensityLayerIndex, studentLayerIndex, luxuryLayerIndex);
                                tempZone.locations = new FacilityLocation[1];
                                tempZone.locations[0] = new FacilityLocation(myParent, myParent.allData.all_Nodes[i], myParent.allData.all_Nodes[i].myWays[0], Double.parseDouble(lavaValueText.getText()));
                                tempZone.locations[0].zoneParent = tempZone;
                                nodeBatch.add(tempZone);
                            }
                            if (nodeBatch.size() >= batchSize) {
                                myParent.flowControl.simulateMultiLayerNonCompetingFacilityBased(nodeBatch.toArray(new Zones[nodeBatch.size()]), trafficLayerIndex, (int) numCPUSpinner.getValue(), false);
//                                for (int j = 0; j < nodeBatch.size(); j++) {
//                                    nodeBatch.get(j).locations[0].nodeLocation.layers.add(nodeBatch.get(j).locations[0].baseDemand[0]);
//                                }
                                nodeBatch = new ArrayList();
                            }
                            System.out.println(((float) i / (float) numSamples));
                            jProgressBar1.setValue((int) (((float) i / (float) numSamples)*100));
                        }
                    } else {
                        System.out.println("Can not evaluate valid nodes by categorial layer, numeric layer is required. Valid nodes are defined as non-negative nodes.");
                        System.out.println("Considering all nodes.");
                        for (int i = 0; i < numSamples; i++) {
                            Zones tempZone = new Zones(landPriceLayerIndex, landExistanceLayerIndex, baseDemandLayerIndex, tourismGainLayerIndex, populationDensityLayerIndex, studentLayerIndex, luxuryLayerIndex);
                            tempZone.locations = new FacilityLocation[1];
                            tempZone.locations[0] = new FacilityLocation(myParent, myParent.allData.all_Nodes[i], myParent.allData.all_Nodes[i].myWays[0], Double.parseDouble(lavaValueText.getText()));
                            tempZone.locations[0].zoneParent = tempZone;
                            nodeBatch.add(tempZone);
                            if (nodeBatch.size() >= batchSize) {
                                myParent.flowControl.simulateMultiLayerNonCompetingFacilityBased(nodeBatch.toArray(new Zones[nodeBatch.size()]), trafficLayerIndex, (int) numCPUSpinner.getValue(), false);
//                                for (int j = 0; j < nodeBatch.size(); j++) {
//                                    nodeBatch.get(j).locations[0].nodeLocation.layers.add(nodeBatch.get(j).locations[0].baseDemand[0]);
//                                }
                                nodeBatch = new ArrayList();
                            }
                            System.out.println(((float) i / (float) numSamples));
                            jProgressBar1.setValue((int) (((float) i / (float) numSamples)*100));
                        }
                    }
                }
                //REPORTING
                detailedResults= detailedResults+ "Batch size: " +nodeBatch.size()+ System.lineSeparator();
                
                long endTime = System.nanoTime();
                double elapsed = ((endTime - startTime) / 1000000000);
                double endRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
                double usedRAM = endRAM - startRAM;
                localReport = new ReportResults(date, "Full demand, sampled "+jCheckBox1.isSelected() , startTime, endTime, elapsed, (int) numCPUSpinner.getValue(), startRAM, endRAM, usedRAM, detailedResults);
                myParent.allData.results.add(localReport);
                myParent.refreshReportList();
                //REPORTING
            }
        });
        thread.start();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JFormattedTextField lavaValueText;
    private javax.swing.JComboBox layerNameCombobox;
    private javax.swing.JFormattedTextField nodeBatchText;
    private javax.swing.JSpinner numCPUSpinner;
    // End of variables declaration//GEN-END:variables
}
