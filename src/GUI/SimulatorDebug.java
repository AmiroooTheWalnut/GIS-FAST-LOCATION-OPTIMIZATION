/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Clustering.Zones;
import GIS3D.LayerDefinition;
import GIS3D.Viewing;
import Simulation.FacilityLocation;
import com.jme3.system.AppSettings;
import com.jme3.system.JmeCanvasContext;
import java.awt.Canvas;
import java.util.concurrent.Callable;

/**
 *
 * @author Amir72c
 */
public class SimulatorDebug extends javax.swing.JDialog {

    main_frame myParent;
    FacilityLocation testFacilities[];
    Zones testZones[];
    String layers[];
    Viewing parentApp;
    AppSettings settings;
    Canvas canvas;
    boolean isZoneActive = false;

    /**
     * Creates new form SimulatorDebug
     */
    public SimulatorDebug(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        myParent = (main_frame) parent;

        layers = new String[myParent.allData.all_Layers.size() + 1];
        layers[0] = "None";
        for (int i = 1; i < layers.length; i++) {
            //System.out.println(((LayerDefinition) mainFrame.allData.all_Layers.get(i)).layerName);
            layers[i] = ((LayerDefinition) myParent.allData.all_Layers.get(i - 1)).layerName;
        }

        resetLayerList.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers.length;
            }

            @Override
            public Object getElementAt(int index) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers[index];
            }
        });

        resetLayerList.setSelectedIndex(myParent.findLayer("competitors") + 1);

        parentApp = new Viewing((main_frame) parent);
        settings = new AppSettings(true);
        settings.setFrameRate(myParent.capFrameRate);
        parentApp.setSettings(settings);
        parentApp.mySettings = settings;
        parentApp.createCanvas();
        parentApp.startCanvas();
        JmeCanvasContext context = (JmeCanvasContext) parentApp.getContext();
        canvas = context.getCanvas();
        canvas.setSize(jPanel5.getWidth(), jPanel5.getHeight());
        jPanel5.add(canvas);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        initOneLayerCompetitionLavaBased = new javax.swing.JButton();
        iterateOneLayerCompetitionLavaBased = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        initOneLayerCompetitionFacilityBased = new javax.swing.JButton();
        iterateOneLayerCompetitionFacilityBased = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        initMultiLayerZoneBased = new javax.swing.JButton();
        iterateMultiLayerZoneBased = new javax.swing.JButton();
        numZonesSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        initOneLayerNonCompetition = new javax.swing.JButton();
        iterateOneLayerNonCompetition = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        initMultiLayerNonCompetition = new javax.swing.JButton();
        iterateMultiLayerNonCompetition = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        numCPUSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        numFacilitiesSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        lavaAmount = new javax.swing.JTextField();
        isIterative = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        resetLayerList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentLavaLayers = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setMinimumSize(new java.awt.Dimension(420, 200));
        jPanel4.setPreferredSize(new java.awt.Dimension(420, 400));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("One layer competion lava based"));
        jPanel1.setMinimumSize(new java.awt.Dimension(160, 75));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 80));

        initOneLayerCompetitionLavaBased.setText("Init");
        initOneLayerCompetitionLavaBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initOneLayerCompetitionLavaBasedActionPerformed(evt);
            }
        });

        iterateOneLayerCompetitionLavaBased.setText("Iterate");
        iterateOneLayerCompetitionLavaBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iterateOneLayerCompetitionLavaBasedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initOneLayerCompetitionLavaBased)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iterateOneLayerCompetitionLavaBased)
                .addGap(0, 56, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initOneLayerCompetitionLavaBased)
                    .addComponent(iterateOneLayerCompetitionLavaBased))
                .addGap(34, 34, 34))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("One layer competition facility based"));
        jPanel7.setMinimumSize(new java.awt.Dimension(160, 75));
        jPanel7.setPreferredSize(new java.awt.Dimension(200, 80));

        initOneLayerCompetitionFacilityBased.setText("Init");
        initOneLayerCompetitionFacilityBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initOneLayerCompetitionFacilityBasedActionPerformed(evt);
            }
        });

        iterateOneLayerCompetitionFacilityBased.setText("Iterate");
        iterateOneLayerCompetitionFacilityBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iterateOneLayerCompetitionFacilityBasedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initOneLayerCompetitionFacilityBased)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iterateOneLayerCompetitionFacilityBased)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initOneLayerCompetitionFacilityBased)
                    .addComponent(iterateOneLayerCompetitionFacilityBased))
                .addGap(34, 34, 34))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Multi layer competition zone based"));
        jPanel2.setMinimumSize(new java.awt.Dimension(160, 75));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 80));

        initMultiLayerZoneBased.setText("Init");
        initMultiLayerZoneBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initMultiLayerZoneBasedActionPerformed(evt);
            }
        });

        iterateMultiLayerZoneBased.setText("Iterate");
        iterateMultiLayerZoneBased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iterateMultiLayerZoneBasedActionPerformed(evt);
            }
        });

        numZonesSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel2.setText("Number of Zones:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(initMultiLayerZoneBased)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iterateMultiLayerZoneBased)
                        .addGap(0, 46, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(7, 7, 7)
                        .addComponent(numZonesSpinner)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initMultiLayerZoneBased)
                    .addComponent(iterateMultiLayerZoneBased))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numZonesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("One layer non competition"));
        jPanel3.setMinimumSize(new java.awt.Dimension(160, 75));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 80));

        initOneLayerNonCompetition.setText("Init");
        initOneLayerNonCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initOneLayerNonCompetitionActionPerformed(evt);
            }
        });

        iterateOneLayerNonCompetition.setText("Iterate");
        iterateOneLayerNonCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iterateOneLayerNonCompetitionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initOneLayerNonCompetition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iterateOneLayerNonCompetition)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initOneLayerNonCompetition)
                    .addComponent(iterateOneLayerNonCompetition))
                .addGap(34, 34, 34))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Multi layer non competition"));
        jPanel6.setMinimumSize(new java.awt.Dimension(160, 75));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 80));

        initMultiLayerNonCompetition.setText("Init");
        initMultiLayerNonCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initMultiLayerNonCompetitionActionPerformed(evt);
            }
        });

        iterateMultiLayerNonCompetition.setText("Iterate");
        iterateMultiLayerNonCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iterateMultiLayerNonCompetitionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initMultiLayerNonCompetition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iterateMultiLayerNonCompetition)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initMultiLayerNonCompetition)
                    .addComponent(iterateMultiLayerNonCompetition))
                .addGap(34, 34, 34))
        );

        jLabel7.setText("NumCPUs:");

        numCPUSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        numCPUSpinner.setMinimumSize(new java.awt.Dimension(35, 20));
        numCPUSpinner.setPreferredSize(new java.awt.Dimension(60, 20));

        jLabel3.setText("ResetLayer:");

        jLabel6.setText("Current lava layers:");

        jLabel9.setText("Num facilities:");

        numFacilitiesSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(4), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel1.setText("Lava value:");

        lavaAmount.setText("1");

        isIterative.setSelected(true);
        isIterative.setText("Iterative?");

        resetLayerList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        resetLayerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resetLayerListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(resetLayerList);

        currentLavaLayers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                currentLavaLayersValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(currentLavaLayers);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numFacilitiesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lavaAmount))
                            .addComponent(isIterative)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numCPUSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(numFacilitiesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lavaAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isIterative)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(numCPUSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel4);

        jPanel5.setMinimumSize(new java.awt.Dimension(100, 100));
        jPanel5.setName(""); // NOI18N
        jPanel5.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel5ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initOneLayerCompetitionLavaBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initOneLayerCompetitionLavaBasedActionPerformed
        // TODO add your handling code here:
        myParent.flowControl.lavaBuffer.clear();
        myParent.flowControl.queue_lavaBuffer.clear();
        myParent.flowControl.queue_lavaRemove.clear();
        testFacilities = initFacilities((int) numFacilitiesSpinner.getValue());
        if (resetLayerList.getSelectedIndex() == 0) {
            myParent.flowControl.simulateOneLayerCompetingLavaBased(testFacilities, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), -1, isIterative.isSelected());
        } else {
            myParent.flowControl.simulateOneLayerCompetingLavaBased(testFacilities, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), resetLayerList.getSelectedIndex() - 1, isIterative.isSelected());
        }
        setLavaLayersList();
        isZoneActive = false;
    }//GEN-LAST:event_initOneLayerCompetitionLavaBasedActionPerformed

    private void iterateOneLayerCompetitionLavaBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iterateOneLayerCompetitionLavaBasedActionPerformed
        // TODO add your handling code here:
        myParent.flowControl.iterateOneLayerCompetingLavaBased((int) numCPUSpinner.getValue());
        if (currentLavaLayers.getSelectedIndex() != -1) {
            currentLavaLayersValueChanged(null);
        }
    }//GEN-LAST:event_iterateOneLayerCompetitionLavaBasedActionPerformed

    private void initOneLayerCompetitionFacilityBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initOneLayerCompetitionFacilityBasedActionPerformed
        // TODO add your handling code here:
        testFacilities = initFacilities((int) numFacilitiesSpinner.getValue());
        if (resetLayerList.getSelectedIndex() == 0) {
            myParent.flowControl.simulateOneLayerCompetingFacilityBased(testFacilities, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), -1, isIterative.isSelected());
        } else {
            myParent.flowControl.simulateOneLayerCompetingFacilityBased(testFacilities, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), resetLayerList.getSelectedIndex() - 1, isIterative.isSelected());
        }
        setLavaLayersList();
        isZoneActive = false;
    }//GEN-LAST:event_initOneLayerCompetitionFacilityBasedActionPerformed

    private void iterateOneLayerCompetitionFacilityBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iterateOneLayerCompetitionFacilityBasedActionPerformed
        // TODO add your handling code here:
        myParent.flowControl.iterateOneLayerCompetingFacilityBased(testFacilities, (int) numCPUSpinner.getValue());
        if (currentLavaLayers.getSelectedIndex() != -1) {
            currentLavaLayersValueChanged(null);
        }
    }//GEN-LAST:event_iterateOneLayerCompetitionFacilityBasedActionPerformed

    private void initMultiLayerZoneBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initMultiLayerZoneBasedActionPerformed
        // TODO add your handling code here:
        testZones = initZone((int)numZonesSpinner.getValue(), (int) numFacilitiesSpinner.getValue());
        if (resetLayerList.getSelectedIndex() == 0) {
            myParent.flowControl.simulateMultiLayerCompetingZoneBased(testZones, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), -1, isIterative.isSelected());
        } else {
            myParent.flowControl.simulateMultiLayerCompetingZoneBased(testZones, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), resetLayerList.getSelectedIndex() - 1, isIterative.isSelected());
        }
        setLavaLayersList();
        isZoneActive = true;
    }//GEN-LAST:event_initMultiLayerZoneBasedActionPerformed

    private void iterateMultiLayerZoneBasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iterateMultiLayerZoneBasedActionPerformed
        // TODO add your handling code here:
        myParent.flowControl.iterateMultiLayerCompetingZoneBased(testZones, (int) numCPUSpinner.getValue());
        if (currentLavaLayers.getSelectedIndex() != -1) {
            currentLavaLayersValueChanged(null);
        }
    }//GEN-LAST:event_iterateMultiLayerZoneBasedActionPerformed

    private void initOneLayerNonCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initOneLayerNonCompetitionActionPerformed
        // TODO add your handling code here:
        testFacilities = initFacilities(1);
        myParent.flowControl.simulateOneLayerNonCompetingSerial(testFacilities, myParent.findLayer("traffic"), isIterative.isSelected());
        setLavaLayersList();
        isZoneActive = false;
    }//GEN-LAST:event_initOneLayerNonCompetitionActionPerformed

    private void iterateOneLayerNonCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iterateOneLayerNonCompetitionActionPerformed
        // TODO add your handling code here:
        myParent.flowControl.iterateOneLayerCompetingFacilityBased(testFacilities, 1);
        if (currentLavaLayers.getSelectedIndex() != -1) {
            currentLavaLayersValueChanged(null);
        }
    }//GEN-LAST:event_iterateOneLayerNonCompetitionActionPerformed

    private void initMultiLayerNonCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initMultiLayerNonCompetitionActionPerformed
        // TODO add your handling code here:
        testZones = initZone((int) numFacilitiesSpinner.getValue(), 1);
        if (resetLayerList.getSelectedIndex() == 0) {
            myParent.flowControl.simulateMultiLayerCompetingZoneBased(testZones, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), -1, isIterative.isSelected());
        } else {
            myParent.flowControl.simulateMultiLayerCompetingZoneBased(testZones, myParent.findLayer("traffic"), (int) numCPUSpinner.getValue(), resetLayerList.getSelectedIndex() - 1, isIterative.isSelected());
        }
        setLavaLayersList();
        isZoneActive = true;
    }//GEN-LAST:event_initMultiLayerNonCompetitionActionPerformed

    private void iterateMultiLayerNonCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iterateMultiLayerNonCompetitionActionPerformed
        // TODO add your handling code here:
        myParent.flowControl.iterateMultiLayerNonCompetingFacilityBased(testZones, (int) numCPUSpinner.getValue());
        if (currentLavaLayers.getSelectedIndex() != -1) {
            currentLavaLayersValueChanged(null);
        }
    }//GEN-LAST:event_iterateMultiLayerNonCompetitionActionPerformed

    private void jPanel5ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel5ComponentResized
        // TODO add your handling code here:
        if (this.isVisible()) {
            settings.setWidth(jPanel5.getWidth());
            settings.setHeight(jPanel5.getHeight());
            canvas.setSize(settings.getWidth(), settings.getHeight());
        }
    }//GEN-LAST:event_jPanel5ComponentResized

    private void currentLavaLayersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_currentLavaLayersValueChanged
        // TODO add your handling code here:
        parentApp.enqueue(new Callable() {
            public Object call() throws Exception {
                if (currentLavaLayers.getSelectedIndex() != -1) {
                    if (isZoneActive == true) {
                        parentApp.removeAllHeadquarters();
                        for (int i = 0; i < testZones.length; i++) {
                            for (int j = 0; j < testZones[i].locations.length; j++) {
                                parentApp.headquarter(testZones[currentLavaLayers.getSelectedIndex()].locations[j].renderingLocation, testZones[currentLavaLayers.getSelectedIndex()].locations[j].capacity, "center");
                            }
                        }
                    } else {
                        parentApp.removeAllHeadquarters();
                        for (int i = 0; i < testFacilities.length; i++) {
                            parentApp.headquarter(testFacilities[i].renderingLocation, testFacilities[i].capacity, "center");
                        }
                    }
                    myParent.preProcessor.setWaysColorLavaLayerBased(myParent.allData, currentLavaLayers.getSelectedIndex());
                    parentApp.isRefreshing = true;
                    return null;
                }
                return null;
            }
        });
    }//GEN-LAST:event_currentLavaLayersValueChanged

    private void resetLayerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resetLayerListValueChanged
        // TODO add your handling code here:
        if (parentApp != null) {
            parentApp.enqueue(new Callable() {
                public Object call() throws Exception {
                    myParent.preProcessor.setWaysColorLayerBased(myParent.allData, resetLayerList.getSelectedIndex());
//                myApp.refreshApp();
                    parentApp.isRefreshing = true;
                    // call methods that modify the scene graph here
                    return null;
                }
            });
        }

    }//GEN-LAST:event_resetLayerListValueChanged

    public FacilityLocation[] initFacilities(int numFacilities) {
        FacilityLocation output[] = new FacilityLocation[numFacilities];
        for (int i = 0; i < numFacilities; i++) {
            int way_init = (int) (Math.round(Math.random() * (myParent.allData.all_Ways.length - 1)));
            int node_init = (int) (Math.round(Math.random() * (myParent.allData.all_Ways[way_init].myNodes.length - 1)));
            do {
                way_init = (int) (Math.round(Math.random() * (myParent.allData.all_Ways.length - 1)));
                node_init = (int) (Math.round(Math.random() * (myParent.allData.all_Ways[way_init].myNodes.length - 1)));
            } while (myParent.allData.all_Ways[way_init].type == null);
            output[i] = new FacilityLocation(myParent, myParent.allData.all_Ways[way_init].myNodes[node_init], myParent.allData.all_Ways[way_init], Double.parseDouble(lavaAmount.getText()));
        }
//        System.out.println(output[0].nodeLocation.id);
        return output;
    }

    public Zones[] initZone(int numZones, int numFacilities) {
        Zones output[] = new Zones[numZones];
        for (int i = 0; i < numZones; i++) {
            int landPriceLayerIndex = myParent.findLayer("landprice");
            int landExistanceLayerIndex = myParent.findLayer("freespace");
            int baseDemandLayerIndex = myParent.findLayer("base");
            int tourismGainLayerIndex = myParent.findLayer("tourismlayer");
            int populationDensityLayerIndex = myParent.findLayer("population_density");
            int studentLayerIndex = myParent.findLayer("studentLayer");
            int luxuryLayerIndex = myParent.findLayer("luxuryLayer");
            output[i] = new Zones(landPriceLayerIndex, landExistanceLayerIndex, baseDemandLayerIndex, tourismGainLayerIndex, populationDensityLayerIndex, studentLayerIndex, luxuryLayerIndex);
            output[i].locations = initFacilities(numFacilities);
            output[i].baseDemand = new float[numFacilities][3][3];
            output[i].landExistance = new float[numFacilities];
            output[i].landPrice = new float[numFacilities];
            output[i].tourismGain = new float[numFacilities][3];
            output[i].transportationCost = new float[numFacilities];
            for (int j = 0; j < numFacilities; j++) {
                output[i].locations[j].zoneParent = output[i];
            }
        }
        return output;
    }
    String lavaLayers[];

    public void setLavaLayersList() {
        lavaLayers = new String[myParent.allData.currentNumLavaLayers];
        for (int i = 0; i < lavaLayers.length; i++) {
            lavaLayers[i] = "LavaLayer" + i;
        }

        currentLavaLayers.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return lavaLayers.length;
            }

            @Override
            public Object getElementAt(int index) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return lavaLayers[index];
            }
        });
    }
//    public void refreshViewing()
//    {
//        myParent.preProcessor.setWaysColorLavaLayerBased(myParent.allData, currentLavaLayers.getSelectedIndex());
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList currentLavaLayers;
    private javax.swing.JButton initMultiLayerNonCompetition;
    private javax.swing.JButton initMultiLayerZoneBased;
    private javax.swing.JButton initOneLayerCompetitionFacilityBased;
    private javax.swing.JButton initOneLayerCompetitionLavaBased;
    private javax.swing.JButton initOneLayerNonCompetition;
    private javax.swing.JCheckBox isIterative;
    private javax.swing.JButton iterateMultiLayerNonCompetition;
    private javax.swing.JButton iterateMultiLayerZoneBased;
    private javax.swing.JButton iterateOneLayerCompetitionFacilityBased;
    private javax.swing.JButton iterateOneLayerCompetitionLavaBased;
    private javax.swing.JButton iterateOneLayerNonCompetition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField lavaAmount;
    private javax.swing.JSpinner numCPUSpinner;
    private javax.swing.JSpinner numFacilitiesSpinner;
    private javax.swing.JSpinner numZonesSpinner;
    private javax.swing.JList resetLayerList;
    // End of variables declaration//GEN-END:variables
}
