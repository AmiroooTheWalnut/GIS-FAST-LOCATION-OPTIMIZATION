/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Clustering.Heuristic;
import Clustering.HeuristicViewing;
import GIS3D.LayerDefinition;
import GIS3D.NumericLayer;
import GIS3D.ReportResults;
import com.jme3.system.AppSettings;
import com.jme3.system.JmeCanvasContext;
import java.awt.Canvas;
import java.awt.Dimension;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.Callable;

/**
 *
 * @author Amir72c
 */
public class HeuristicController extends javax.swing.JDialog {

    main_frame myParent;
    public Heuristic heuristic;
    public HeuristicViewing parentApp;
    AppSettings settings;
    Canvas canvas;
    String[] layers;
    boolean isAlgorithmInit = false;
    boolean isSimulationReady = false;

    ReportResults localReport;

    /**
     * Creates new form HeuristicController
     */
    public HeuristicController(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        myParent = (main_frame) parent;

        int cores = Runtime.getRuntime().availableProcessors();
        numCPUSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(cores), Integer.valueOf(1)));

        layers = new String[myParent.allData.all_Layers.size()];
        for (int i = 0; i < layers.length; i++) {
            //System.out.println(((LayerDefinition) mainFrame.allData.all_Layers.get(i)).layerName);
            layers[i] = ((LayerDefinition) myParent.allData.all_Layers.get(i)).layerName;
        }

        jList1.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers.length;
            }

            @Override
            public Object getElementAt(int index) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers[index];
            }
        });

        parentApp = new HeuristicViewing((main_frame) parent);
//        myParent.preProcessor.setWaysColor(myParent.allData, 1);
        settings = new AppSettings(true);
        settings.setWidth(jPanel2.getWidth());
        settings.setHeight(jPanel2.getHeight());
        settings.setFrameRate(myParent.capFrameRate);

        parentApp.setSettings(settings);

        parentApp.createCanvas();
        parentApp.startCanvas();

        JmeCanvasContext context = (JmeCanvasContext) parentApp.getContext();
        canvas = context.getCanvas();
        canvas.setSize(settings.getWidth(), settings.getHeight());
        jPanel2.add(canvas);

        parentApp.mySettings = settings;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        algorihtmIterateButton = new javax.swing.JButton();
        isAlgorithmIterate = new javax.swing.JCheckBox();
        isSimulateIterate = new javax.swing.JCheckBox();
        algorithmInitButton = new javax.swing.JButton();
        algorithmSimulateIterateButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        numCPUSpinner = new javax.swing.JSpinner();
        runBulkyButton = new javax.swing.JButton();
        runChunkedButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jSpinner1 = new javax.swing.JSpinner();
        jRadioButton2 = new javax.swing.JRadioButton();
        jFormattedTextField2 = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        legendPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMinimumSize(new java.awt.Dimension(50, 50));

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        algorihtmIterateButton.setText("Iterate algorithm");
        algorihtmIterateButton.setEnabled(false);
        algorihtmIterateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorihtmIterateButtonActionPerformed(evt);
            }
        });

        isAlgorithmIterate.setSelected(true);
        isAlgorithmIterate.setText("Algorithm iterative");
        isAlgorithmIterate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isAlgorithmIterateActionPerformed(evt);
            }
        });

        isSimulateIterate.setSelected(true);
        isSimulateIterate.setText("Simulate iterative");
        isSimulateIterate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isSimulateIterateActionPerformed(evt);
            }
        });

        algorithmInitButton.setText("Init algorithm");
        algorithmInitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmInitButtonActionPerformed(evt);
            }
        });

        algorithmSimulateIterateButton.setText("Iterate simulation");
        algorithmSimulateIterateButton.setEnabled(false);
        algorithmSimulateIterateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmSimulateIterateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(isSimulateIterate)
                    .addComponent(algorihtmIterateButton)
                    .addComponent(isAlgorithmIterate)
                    .addComponent(algorithmInitButton)
                    .addComponent(algorithmSimulateIterateButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(algorithmInitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(algorihtmIterateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(algorithmSimulateIterateButton)
                .addGap(20, 20, 20)
                .addComponent(isAlgorithmIterate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(isSimulateIterate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Number of processors:");

        numCPUSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        runBulkyButton.setText("Run bulky");
        runBulkyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBulkyButtonActionPerformed(evt);
            }
        });

        runChunkedButton.setText("Run chunked");
        runChunkedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runChunkedButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Competition threshold:");

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jFormattedTextField1.setText("0.2");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Num candidates");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(20, 1, null, 1));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Demand threshold");

        jFormattedTextField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jFormattedTextField2.setText("20000");
        jFormattedTextField2.setToolTipText("");

        jButton1.setText("Automation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextField2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numCPUSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(runBulkyButton)
                            .addComponent(runChunkedButton)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jRadioButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jRadioButton2)
                            .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numCPUSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(runBulkyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runChunkedButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMinimumSize(new java.awt.Dimension(50, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 400));
        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel2ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 593, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel2);

        jSplitPane1.setRightComponent(jSplitPane2);

        legendPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        legendPanel.setMinimumSize(new java.awt.Dimension(50, 50));
        legendPanel.setPreferredSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout legendPanelLayout = new javax.swing.GroupLayout(legendPanel);
        legendPanel.setLayout(legendPanelLayout);
        legendPanelLayout.setHorizontalGroup(
            legendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        legendPanelLayout.setVerticalGroup(
            legendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );

        jSplitPane3.setRightComponent(legendPanel);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setMinimumSize(new java.awt.Dimension(50, 50));
        jList1.setPreferredSize(new java.awt.Dimension(100, 80));
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jSplitPane3.setLeftComponent(jScrollPane1);

        jSplitPane1.setLeftComponent(jSplitPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 985, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void isSimulateIterateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isSimulateIterateActionPerformed
        // TODO add your handling code here:
        refreshEnables();
    }//GEN-LAST:event_isSimulateIterateActionPerformed

    private void isAlgorithmIterateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isAlgorithmIterateActionPerformed
        // TODO add your handling code here:
        refreshEnables();

    }//GEN-LAST:event_isAlgorithmIterateActionPerformed

    public void refreshEnables() {
        if (isAlgorithmIterate.isSelected()) {
            algorithmInitButton.setEnabled(true);
            if (isAlgorithmInit == true) {
                algorihtmIterateButton.setEnabled(true);
            }
            isSimulateIterate.setEnabled(true);
            if (isSimulateIterate.isSelected()) {
                if (isSimulationReady == true) {
                    algorithmSimulateIterateButton.setEnabled(true);
                }
            } else {
                algorithmSimulateIterateButton.setEnabled(false);
            }
        } else {
            algorithmInitButton.setEnabled(false);
            algorihtmIterateButton.setEnabled(false);
            algorithmSimulateIterateButton.setEnabled(false);
            isSimulateIterate.setEnabled(false);
        }
    }

    private void algorithmInitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmInitButtonActionPerformed
        // TODO add your handling code here:
        jList1.setSelectedIndex(0);
        int allMixedLayerIndex = myParent.findLayer("allMixed");
        int trafficLayerIndex = myParent.findLayer("traffic");
        int populationDensityLayerIndex = myParent.findLayer("population_density");
        int tourismGainLayerIndex = myParent.findLayer("tourismlayer");
        int studentLayerIndex = myParent.findLayer("studentLayer");
        int luxuryLayerIndex = myParent.findLayer("luxuryLayer");
        heuristic = new Heuristic(myParent, this, trafficLayerIndex, allMixedLayerIndex, populationDensityLayerIndex, tourismGainLayerIndex, studentLayerIndex, luxuryLayerIndex, (int) numCPUSpinner.getValue());

        heuristic.heuristicFlowControl.resetLayerIndex = allMixedLayerIndex;
        isAlgorithmInit = true;
        refreshEnables();
    }//GEN-LAST:event_algorithmInitButtonActionPerformed

    private void runBulkyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBulkyButtonActionPerformed
        // TODO add your handling code here:
        int allMixedLayerIndex = myParent.findLayer("allMixed");
        int trafficLayerIndex = myParent.findLayer("traffic");
        int populationDensityLayerIndex = myParent.findLayer("population_density");
        int tourismGainLayerIndex = myParent.findLayer("tourismlayer");
        int studentLayerIndex = myParent.findLayer("studentLayer");
        int luxuryLayerIndex = myParent.findLayer("luxuryLayer");
        heuristic = new Heuristic(myParent, this, trafficLayerIndex, allMixedLayerIndex, populationDensityLayerIndex, tourismGainLayerIndex, studentLayerIndex, luxuryLayerIndex, (int) numCPUSpinner.getValue());

        heuristic.heuristicFlowControl.resetLayerIndex = allMixedLayerIndex;

        //REPORTING
        String detailedResults = "Zoning and evaluating based on bulky heuristic." + System.lineSeparator();
        Calendar currentDate = Calendar.getInstance();
        Date date = currentDate.getTime();
        double startRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
        long startTime = System.nanoTime();
        //REPORTING

        double demandThreshold;
        int numCandidates;
        if (jRadioButton1.isSelected() == true) {
            demandThreshold = -1;
            numCandidates = Integer.parseInt(String.valueOf(jSpinner1.getValue()));
        } else {
            demandThreshold = Double.parseDouble(String.valueOf(jFormattedTextField2.getValue()));
            numCandidates = 1;
        }

        heuristic.buildClusterer(false, Double.parseDouble(String.valueOf(jFormattedTextField1.getValue())), demandThreshold, numCandidates);
        detailedResults = detailedResults + "Results: " + System.lineSeparator();
        detailedResults = detailedResults + heuristic.benchmarkModel.myConsole.getText() + System.lineSeparator();

        //REPORTING
        long endTime = System.nanoTime();
        double elapsed = ((endTime - startTime) / 1000000000);
        double endRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
        double usedRAM = endRAM - startRAM;
        localReport = new ReportResults(date, "Heuristic bulky", startTime, endTime, elapsed, (int) numCPUSpinner.getValue(), startRAM, endRAM, usedRAM, detailedResults);
        myParent.allData.results.add(localReport);
        myParent.refreshReportList();
        //REPORTING

    }//GEN-LAST:event_runBulkyButtonActionPerformed

    private void algorihtmIterateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorihtmIterateButtonActionPerformed
        // TODO add your handling code here:
        if (heuristic.isAlgorithmFinished == false) {
            double demandThreshold;
            int numCandidates;
            if (jRadioButton1.isSelected() == true) {
                demandThreshold = -1;
                numCandidates = Integer.parseInt(String.valueOf(jSpinner1.getValue()));
            } else {
                demandThreshold = Double.parseDouble(String.valueOf(jFormattedTextField2.getValue()));
                numCandidates = 1;
            }
            heuristic.iterate(true, false, Double.parseDouble(String.valueOf(jFormattedTextField1.getValue())), demandThreshold, numCandidates);
            if (isSimulateIterate.isSelected()) {
                heuristic.heuristicFlowControl.init(heuristic.heuristicFreeLocations, heuristic.trafficLayer);
            }
            parentApp.enqueue(new Callable() {
                public Object call() throws Exception {
                    // call methods that modify the scene graph here
                    parentApp.removeAllHeadquarters();
                    for (int i = 0; i < heuristic.heuristicFreeLocations.size(); i++) {
                        parentApp.headquarter(heuristic.heuristicFreeLocations.get(i).facilityLocation.nodeLocation.renderingLocation, heuristic.heuristicFreeLocations.get(i).facilityLocation.capacity, "center");
                    }
                    return null;
                }
            });
            isSimulationReady = true;
            refreshEnables();
            jList1.setSelectedIndex(0);
            if (!isSimulateIterate.isSelected()) {
                heuristic.heuristicFlowControl.simulateSerial(heuristic.trafficLayer, heuristic.populationDensityLayer);
                parentApp.isRefreshing = true;
            }
        } else {
            System.out.println("Algorithm finished");
        }

    }//GEN-LAST:event_algorihtmIterateButtonActionPerformed

    private void algorithmSimulateIterateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmSimulateIterateButtonActionPerformed
        // TODO add your handling code here:
        heuristic.heuristicFlowControl.runOneIterateForAll(heuristic.heuristicFreeLocations);
        parentApp.isIterateDebug = true;
        parentApp.isRefreshing = true;
    }//GEN-LAST:event_algorithmSimulateIterateButtonActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        parentApp.enqueue(new Callable() {
            public Object call() throws Exception {
                refreshLegendList(jList1.getSelectedIndex());
                myParent.preProcessor.setWaysColorLayerBased(myParent.allData, jList1.getSelectedIndex());
//                parentApp.refreshApp();
                parentApp.isRefreshing = true;
                // call methods that modify the scene graph here
                return null;
            }
        });
    }//GEN-LAST:event_jList1ValueChanged

    private void jPanel2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel2ComponentResized
        // TODO add your handling code here:
        if (this.isVisible()) {
            settings.setWidth(jPanel2.getWidth());
            settings.setHeight(jPanel2.getHeight());
            canvas.setSize(settings.getWidth(), settings.getHeight());
            parentApp.enqueue(new Callable() {
                public Object call() throws Exception {
                    if (parentApp.isPickingNode) {
                        parentApp.resizeCrossHair();
                    }
                    // call methods that modify the scene graph here
                    return null;
                }
            });
        }
    }//GEN-LAST:event_jPanel2ComponentResized

    private void runChunkedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runChunkedButtonActionPerformed
        // TODO add your handling code here:
        int allMixedLayerIndex = myParent.findLayer("allMixed");
        int trafficLayerIndex = myParent.findLayer("traffic");
        int populationDensityLayerIndex = myParent.findLayer("population_density");
        int tourismGainLayerIndex = myParent.findLayer("tourismlayer");
        int studentLayerIndex = myParent.findLayer("studentLayer");
        int luxuryLayerIndex = myParent.findLayer("luxuryLayer");
        heuristic = new Heuristic(myParent, this, trafficLayerIndex, allMixedLayerIndex, populationDensityLayerIndex, tourismGainLayerIndex, studentLayerIndex, luxuryLayerIndex, (int) numCPUSpinner.getValue());

        heuristic.heuristicFlowControl.resetLayerIndex = allMixedLayerIndex;

        //REPORTING
        String detailedResults = "Zoning and evaluating based on chuncked heuristic." + System.lineSeparator();
        Calendar currentDate = Calendar.getInstance();
        Date date = currentDate.getTime();
        double startRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
        long startTime = System.nanoTime();
        //REPORTING

        double demandThreshold;
        int numCandidates;
        if (jRadioButton1.isSelected() == true) {
            demandThreshold = -1;
            numCandidates = Integer.parseInt(String.valueOf(jSpinner1.getValue()));
        } else {
            demandThreshold = Double.parseDouble(String.valueOf(jFormattedTextField2.getText()));
            numCandidates = 1;
        }

        heuristic.buildClusterer(true, Double.parseDouble(String.valueOf(jFormattedTextField1.getText())), demandThreshold, numCandidates);
        detailedResults = detailedResults + "Grid name: " + myParent.allData.grid[0][0].name + System.lineSeparator();
        detailedResults = detailedResults + "Results: " + System.lineSeparator();
        detailedResults = detailedResults + "Competition threshold: " + heuristic.competitorsThreshold + System.lineSeparator();
        detailedResults = detailedResults + heuristic.benchmarkModel.myConsole.getText() + System.lineSeparator();

        //REPORTING
        long endTime = System.nanoTime();
        double elapsed = ((endTime - startTime) / 1000000000);
        double endRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
        double usedRAM = endRAM - startRAM;
        localReport = new ReportResults(date, "Heuristic chuncked " + myParent.allData.grid[0][0].name, startTime, endTime, elapsed, (int) numCPUSpinner.getValue(), startRAM, endRAM, usedRAM, detailedResults);
        myParent.allData.results.add(localReport);
        myParent.refreshReportList();
        //REPORTING
    }//GEN-LAST:event_runChunkedButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        parentApp.stop();
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        HeuristicAutomation heuristicAutomation = new HeuristicAutomation(myParent, this, true);
        heuristicAutomation.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void refreshLegendList(int layerIndex) {
        legendPanel.removeAll();
        if (((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("base") || ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("image")) {
            for (int i = 0; i < ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors.length; i++) {
                ColorDefinition temp = new ColorDefinition(null, ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors[i], i);
                temp.valueText.setText(String.valueOf(((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).values[i]));
                temp.NameText.setText(((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).categories[i]);
                temp.setBounds(0, i * 55, 243, 55);
                legendPanel.add(temp);
            }
            legendPanel.setPreferredSize(new Dimension(243, (int) ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors.length * 55));
        } else if (((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("numeric")) {
            ColorDefinition tempmax = new ColorDefinition(null, ((NumericLayer) myParent.allData.all_Layers.get(layerIndex)).maxColor, 0);
            tempmax.valueText.setText("1");
            tempmax.NameText.setText("Max value");
            tempmax.setBounds(0, 0 * 55, 243, 55);
            legendPanel.add(tempmax);

            ColorDefinition tempmin = new ColorDefinition(null, ((NumericLayer) myParent.allData.all_Layers.get(layerIndex)).minColor, 1);
            tempmin.valueText.setText("0");
            tempmin.NameText.setText("Min value");
            tempmin.setBounds(0, 1 * 55, 243, 55);
            legendPanel.add(tempmin);
            legendPanel.setPreferredSize(new Dimension(243, 2 * 55));
        }

        legendPanel.revalidate();
        legendPanel.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton algorihtmIterateButton;
    private javax.swing.JButton algorithmInitButton;
    private javax.swing.JButton algorithmSimulateIterateButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox isAlgorithmIterate;
    private javax.swing.JCheckBox isSimulateIterate;
    private javax.swing.JButton jButton1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JFormattedTextField jFormattedTextField2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JPanel legendPanel;
    private javax.swing.JSpinner numCPUSpinner;
    private javax.swing.JButton runBulkyButton;
    private javax.swing.JButton runChunkedButton;
    // End of variables declaration//GEN-END:variables
}
