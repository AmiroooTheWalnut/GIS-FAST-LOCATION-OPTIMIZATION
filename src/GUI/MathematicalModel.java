/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GIS3D.LayerDefinition;
import GIS3D.NumericLayer;
import GIS3D.ReportResults;
import GIS3D.Viewing;
import MathematicalModel.BenchmarkModel;
import com.jme3.system.AppSettings;
import com.jme3.system.JmeCanvasContext;
import java.awt.Canvas;
import java.awt.Dimension;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.Callable;

/**
 *
 * @author Amir72c
 */
public class MathematicalModel extends javax.swing.JDialog {

    String[] layers;
    main_frame myParent;
    boolean isReviseLayerList = false;
    Viewing parentApp;
    AppSettings settings;
    Canvas canvas;
    ReportResults localReport;

    /**
     * Creates new form MathematicalModel
     */
    public MathematicalModel(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        numProcessor.setModel(new javax.swing.SpinnerNumberModel(1, 1, Runtime.getRuntime().availableProcessors(), 1));
        myParent = (main_frame) parent;
        layers = new String[myParent.allData.all_Layers.size()];
        for (int i = 0; i < layers.length; i++) {
            //System.out.println(((LayerDefinition) mainFrame.allData.all_Layers.get(i)).layerName);
            layers[i] = ((LayerDefinition) myParent.allData.all_Layers.get(i)).layerName;
        }

        layersList.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers.length;
            }

            @Override
            public Object getElementAt(int index) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if (myParent.allData.all_Layers.get(index) instanceof NumericLayer) {
                    return layers[index] + " UNPROCESSABLE";
                } else {
                    return layers[index];
                }
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers.length;
            }

            @Override
            public Object getElementAt(int index) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers[index];
            }
        });

        parentApp = new Viewing((main_frame) parent);
//        myParent.preProcessor.setWaysColor(myParent.allData, 1);
        settings = new AppSettings(true);
        settings.setWidth(viewPanel.getWidth());
        settings.setHeight(viewPanel.getHeight());
        settings.setFrameRate(myParent.capFrameRate);

        parentApp.setSettings(settings);

        parentApp.createCanvas();
        parentApp.startCanvas();

        JmeCanvasContext context = (JmeCanvasContext) parentApp.getContext();
        canvas = context.getCanvas();
        canvas.setSize(settings.getWidth(), settings.getHeight());
        viewPanel.add(canvas);

        parentApp.mySettings = settings;


        jList1.setSelectedIndex(0);
        refreshLegendList(jList1.getSelectedIndex());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        layersList = new javax.swing.JList();
        runButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        saveResultsButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        viewPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        legendPanel = new javax.swing.JPanel();
        prepareButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        numProcessor = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        layersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        layersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        layersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                layersListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(layersList);

        runButton.setText("Run");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        jScrollPane2.setViewportView(resultsTextArea);

        jLabel1.setText("Select layer:");

        jLabel2.setText("Results:");

        saveResultsButton.setText("Save results");
        saveResultsButton.setEnabled(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(20, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(20, 366));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel1);

        viewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        viewPanel.setPreferredSize(new java.awt.Dimension(200, 200));
        viewPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                viewPanelComponentResized(evt);
            }
        });

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 784, Short.MAX_VALUE)
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 409, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(viewPanel);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setMaximumSize(new java.awt.Dimension(200, 200));
        jList1.setMinimumSize(new java.awt.Dimension(50, 50));
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jSplitPane2.setTopComponent(jScrollPane3);

        legendPanel.setPreferredSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout legendPanelLayout = new javax.swing.GroupLayout(legendPanel);
        legendPanel.setLayout(legendPanelLayout);
        legendPanelLayout.setHorizontalGroup(
            legendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        legendPanelLayout.setVerticalGroup(
            legendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(legendPanel);

        jSplitPane2.setRightComponent(jScrollPane4);

        jSplitPane1.setLeftComponent(jSplitPane2);

        prepareButton.setText("Prepare");
        prepareButton.setEnabled(false);
        prepareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepareButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Num processors:");

        numProcessor.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(0), null, Integer.valueOf(1)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runButton)
                    .addComponent(saveResultsButton)
                    .addComponent(prepareButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(numProcessor, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 849, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prepareButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveResultsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numProcessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void layersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_layersListValueChanged
        // TODO add your handling code here:
        if (layersList.getSelectedIndices().length > 0) {
            prepareButton.setEnabled(true);
        } else {
            prepareButton.setEnabled(false);
        }
    }//GEN-LAST:event_layersListValueChanged

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        int selection = layersList.getSelectedIndex();
        BenchmarkModel benchmarkModel = new BenchmarkModel(myParent);

        //REPORTING
        String detailedResults = "Mathematical model run based on the zones generated as layers" + System.lineSeparator();
        detailedResults = detailedResults + "Used layer: " + layers[selection] + System.lineSeparator();
        Calendar currentDate = Calendar.getInstance();
        Date date = currentDate.getTime();
        double startRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
        long startTime = System.nanoTime();
        //REPORTING

        benchmarkModel.runBasedOnlayerIndex(selection, (int) numProcessor.getValue());
        detailedResults = detailedResults + "Results: " + System.lineSeparator();
        detailedResults = detailedResults + benchmarkModel.myConsole.getText() + System.lineSeparator();

        //REPORTING
        long endTime = System.nanoTime();
        double elapsed = ((endTime - startTime) / 1000000000);
        double endRAM = (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024.0;
        double usedRAM = endRAM - startRAM;
        localReport = new ReportResults(date, "Math model layer:"+layers[selection], startTime, endTime, elapsed, (int) numProcessor.getValue(), startRAM, endRAM, usedRAM, detailedResults);
        myParent.allData.results.add(localReport);
        myParent.refreshReportList();
        //REPORTING

    }//GEN-LAST:event_runButtonActionPerformed

    private void viewPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_viewPanelComponentResized
        // TODO add your handling code here:
        if (this.isVisible()) {
            settings.setWidth(viewPanel.getWidth());
            settings.setHeight(viewPanel.getHeight());
            canvas.setSize(settings.getWidth(), settings.getHeight());
            parentApp.enqueue(new Callable() {
                public Object call() throws Exception {
                    if (parentApp.isPickingNode) {
                        parentApp.resizeCrossHair();
                    }
                    // call methods that modify the scene graph here
                    return null;
                }
            });
        }
    }//GEN-LAST:event_viewPanelComponentResized

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        parentApp.enqueue(new Callable() {
            public Object call() throws Exception {
                refreshLegendList(jList1.getSelectedIndex());
                myParent.preProcessor.setWaysColorLayerBased(myParent.allData, jList1.getSelectedIndex());
                parentApp.refreshApp();
//                parentApp.isRefreshing=true;
                // call methods that modify the scene graph here
                return null;
            }
        });
    }//GEN-LAST:event_jList1ValueChanged

    private void prepareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepareButtonActionPerformed
        // TODO add your handling code here:
        int allMixedLayerIndex = myParent.findLayer("allmixed");
        int baseDemandLayerIndex = myParent.findLayer("base");
        int selection = layersList.getSelectedIndex();
        int numZones = ((LayerDefinition) myParent.allData.all_Layers.get(selection)).categories.length;
        double[] minValuesValues = new double[numZones];
        int[] minValuesIndexs = new int[numZones];
        for (int j = 0; j < numZones; j++) {
            minValuesValues[j] = Double.POSITIVE_INFINITY;
        }
        for (int j = 0; j < myParent.allData.all_Nodes.length; j++) {
            if (!(((LayerDefinition) myParent.allData.all_Layers.get(baseDemandLayerIndex)).categories[((short[]) myParent.allData.all_Nodes[j].layers.get(baseDemandLayerIndex))[0] - 1].toLowerCase().contains("unknown") || ((LayerDefinition) myParent.allData.all_Layers.get(baseDemandLayerIndex)).categories[((short[]) myParent.allData.all_Nodes[j].layers.get(baseDemandLayerIndex))[0] - 1].toLowerCase().contains("foot"))) {
//                    System.out.println();
                if (((double) myParent.allData.all_Nodes[j].layers.get(allMixedLayerIndex)) > 0) {
                    int category = ((short[]) myParent.allData.all_Nodes[j].layers.get(selection))[0];
                    if (myParent.getLayerValue(myParent.allData.all_Nodes[j], allMixedLayerIndex) < minValuesValues[category - 1]) {
                        minValuesValues[category - 1] = myParent.getLayerValue(myParent.allData.all_Nodes[j], allMixedLayerIndex);
                        minValuesIndexs[category - 1] = j;
                    }
                }
            }
        }
        final int[] passedMinValuesIndexs = minValuesIndexs;
        for (int i = 0; i < minValuesIndexs.length; i++) {
            final int passedInt = i;
            parentApp.enqueue(new Callable() {
                public Object call() throws Exception {
                    // call methods that modify the scene graph here
                    parentApp.headquarter(myParent.allData.all_Nodes[passedMinValuesIndexs[passedInt]].renderingLocation, 10, "candidate");
                    return null;
                }
            });
        }
        runButton.setEnabled(true);
    }//GEN-LAST:event_prepareButtonActionPerformed

    public void refreshLegendList(int layerIndex) {
        legendPanel.removeAll();
        if (((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("base") || ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("image")) {
            for (int i = 0; i < ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors.length; i++) {
                ColorDefinition temp = new ColorDefinition(null, ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors[i], i);
                temp.valueText.setText(String.valueOf(((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).values[i]));
                temp.NameText.setText(((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).categories[i]);
                temp.setBounds(0, i * 55, 243, 55);
                legendPanel.add(temp);
            }
            legendPanel.setPreferredSize(new Dimension(243, (int) ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors.length * 55));
        } else if (((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("numeric")) {
            ColorDefinition tempmax = new ColorDefinition(null, ((NumericLayer) myParent.allData.all_Layers.get(layerIndex)).maxColor, 0);
            tempmax.valueText.setText("1");
            tempmax.NameText.setText("Max value");
            tempmax.setBounds(0, 0 * 55, 243, 55);
            legendPanel.add(tempmax);

            ColorDefinition tempmin = new ColorDefinition(null, ((NumericLayer) myParent.allData.all_Layers.get(layerIndex)).minColor, 1);
            tempmin.valueText.setText("0");
            tempmin.NameText.setText("Min value");
            tempmin.setBounds(0, 1 * 55, 243, 55);
            legendPanel.add(tempmin);
            legendPanel.setPreferredSize(new Dimension(243, 2 * 55));
        }

        legendPanel.revalidate();
        legendPanel.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JList layersList;
    private javax.swing.JPanel legendPanel;
    private javax.swing.JSpinner numProcessor;
    private javax.swing.JButton prepareButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveResultsButton;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
