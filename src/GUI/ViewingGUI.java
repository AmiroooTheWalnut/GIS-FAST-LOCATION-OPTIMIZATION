/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GIS3D.LayerDefinition;
import GIS3D.NumericLayer;
import GIS3D.Viewing;
import com.jme3.system.AppSettings;
import com.jme3.system.JmeCanvasContext;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.concurrent.Callable;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.SpinnerListModel;

/**
 *
 * @author Amir72c
 */
public class ViewingGUI extends javax.swing.JDialog {

    Viewing myApp;
    main_frame myParent;
    String[] layers;
    AppSettings settings;
    Canvas canvas;
    boolean isPickNode = false;

    /**
     * Creates new form ViewingGUI
     */
    public ViewingGUI(main_frame mainFrame, boolean modal, Viewing app) {
        super((java.awt.Frame) mainFrame, modal);
        initComponents();
        layers = new String[mainFrame.allData.all_Layers.size()];
        for (int i = 0; i < layers.length; i++) {
            //System.out.println(((LayerDefinition) mainFrame.allData.all_Layers.get(i)).layerName);
            layers[i] = ((LayerDefinition) mainFrame.allData.all_Layers.get(i)).layerName;
        }
        jSpinner1.setModel(new SpinnerListModel(layers));

        layersList.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers.length;
            }

            @Override
            public Object getElementAt(int index) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                return layers[index];
            }
        });

        myApp = app;
        myParent = mainFrame;
//        myParent.preProcessor.setWaysColor(myParent.allData, 1);
        settings = new AppSettings(true);
        settings.setWidth(jPanel1.getWidth());
        settings.setHeight(jPanel1.getHeight());
        settings.setFrameRate(myParent.capFrameRate);

        app.setSettings(settings);

        app.createCanvas();
        app.startCanvas();

        JmeCanvasContext context = (JmeCanvasContext) app.getContext();
        canvas = context.getCanvas();
        canvas.setFocusable(true);
        canvas.setSize(settings.getWidth(), settings.getHeight());
        jPanel1.add(canvas);

        myApp.mySettings = settings;

        myApp.enqueue(new Callable() {
            public Object call() throws Exception {
                for (int i = 0; i < layers.length; i++) {
                    if (jSpinner1.getValue() == layers[i]) {
                        refreshList(i);
                        myParent.preProcessor.setWaysColorLayerBased(myParent.allData, i);
                        myApp.refreshApp();
                        break;
                    }
                }
                if (myApp.isPickingNode || myApp.isPickingRoute) {
                    myApp.showCrosshair();
                }
                // call methods that modify the scene graph here
                return null;
            }
        });

//        canvas.setFocusable(true);
//        jPanel1.setFocusable(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        LegendPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        layersList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 854, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jSpinner1.setModel(new javax.swing.SpinnerListModel(new String[] {"Item 0", "Item 1", "Item 2", "Item 3"}));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout LegendPanelLayout = new javax.swing.GroupLayout(LegendPanel);
        LegendPanel.setLayout(LegendPanelLayout);
        LegendPanelLayout.setHorizontalGroup(
            LegendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
        );
        LegendPanelLayout.setVerticalGroup(
            LegendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 384, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(LegendPanel);

        jLabel1.setText("Idle");

        layersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        layersList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                layersListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(layersList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jSpinner1)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        // TODO add your handling code here:
        myApp.enqueue(new Callable() {
            public Object call() throws Exception {
                for (int i = 0; i < layers.length; i++) {
                    if (jSpinner1.getValue() == layers[i]) {
                        refreshList(i);
                        myParent.preProcessor.setWaysColorLayerBased(myParent.allData, i);
                        myApp.refreshApp();
                        break;
                    }
                }
                // call methods that modify the scene graph here
                return null;
            }
        });
    }//GEN-LAST:event_jSpinner1StateChanged

    public void refreshList(int layerIndex) {
        LegendPanel.removeAll();
        if (((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("base") || ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("image") || ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("category")) {
            for (int i = 0; i < ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors.length; i++) {
                ColorDefinition temp = new ColorDefinition(null, ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors[i], i);
                temp.valueText.setText(String.valueOf(((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).values[i]));
                temp.NameText.setText(((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).categories[i]);
                temp.setBounds(0, i * 55, 243, 55);
                LegendPanel.add(temp);
            }
            LegendPanel.setPreferredSize(new Dimension(243, (int) ((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).colors.length * 55));
        } else if (((LayerDefinition) myParent.allData.all_Layers.get(layerIndex)).myType.equals("numeric")) {
            ColorDefinition tempmax = new ColorDefinition(null, ((NumericLayer) myParent.allData.all_Layers.get(layerIndex)).maxColor, 0);
            tempmax.valueText.setText("1");
            tempmax.NameText.setText("Max value");
            tempmax.setBounds(0, 0 * 55, 243, 55);
            LegendPanel.add(tempmax);

            ColorDefinition tempmin = new ColorDefinition(null, ((NumericLayer) myParent.allData.all_Layers.get(layerIndex)).minColor, 1);
            tempmin.valueText.setText("0");
            tempmin.NameText.setText("Min value");
            tempmin.setBounds(0, 1 * 55, 243, 55);
            LegendPanel.add(tempmin);
            LegendPanel.setPreferredSize(new Dimension(243, 2 * 55));
        }

        LegendPanel.revalidate();
        LegendPanel.repaint();
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        myApp.stop();
    }//GEN-LAST:event_formWindowClosed

    private void jPanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentResized
        // TODO add your handling code here:
        if (this.isVisible()) {
            settings.setWidth(jPanel1.getWidth());
            settings.setHeight(jPanel1.getHeight());
            canvas.setSize(settings.getWidth(), settings.getHeight());
            myApp.enqueue(new Callable() {
                public Object call() throws Exception {
                    if (myApp.isPickingRoute == true) {
                        myApp.resizeCrossHair();
                    }
                    // call methods that modify the scene graph here
                    return null;
                }
            });
        }
    }//GEN-LAST:event_jPanel1ComponentResized

    private void layersListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_layersListValueChanged
        // TODO add your handling code here:
        myApp.enqueue(new Callable() {
            public Object call() throws Exception {
                refreshList(layersList.getSelectedIndex());
                myParent.preProcessor.setWaysColorLayerBased(myParent.allData, layersList.getSelectedIndex());
//                myApp.refreshApp();
                myApp.isRefreshing = true;
                // call methods that modify the scene graph here
                return null;
            }
        });
    }//GEN-LAST:event_layersListValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LegendPanel;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JList layersList;
    // End of variables declaration//GEN-END:variables
}
